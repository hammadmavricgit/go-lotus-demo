/**
 * This file generated by Apso.
 */ /* eslint @typescript-eslint/no-unused-vars: "off" */

import {
  Column,
  Entity,
  ManyToMany,
  CreateDateColumn,
  UpdateDateColumn,
  PrimaryGeneratedColumn,
  Generated,
  JoinColumn,
  JoinTable,
  Index,
  Unique,
  PrimaryColumn,
} from 'typeorm';
import {
  IsOptional,
  IsString,
  MaxLength,
  IsNotEmpty,
  IsEmail,
  IsBoolean,
  ValidateNested,
} from 'class-validator';
import { Type } from 'class-transformer';
import { CrudValidationGroups } from '@nestjsx/crud';
import * as enums from '../enums';
import { User } from '../User/User.entity';

const { CREATE, UPDATE } = CrudValidationGroups;

@Entity('client')
export class Client {
  // Fields
  @PrimaryGeneratedColumn()
  id!: number;

  @CreateDateColumn()
  created_at: Date;

  @UpdateDateColumn()
  updated_at: Date;

  @IsOptional({ groups: [UPDATE] })
  @IsNotEmpty({ groups: [CREATE] })
  @Column({ type: 'text', nullable: false })
  firstName: string;

  @IsOptional({ groups: [UPDATE] })
  @IsNotEmpty({ groups: [CREATE] })
  @Column({ type: 'text', nullable: false })
  lastName: string;

  @Column({ type: 'date', nullable: true })
  dateOfBirth: string;

  @IsOptional({ groups: [UPDATE] })
  @IsEmail({ require_tld: false }, { always: true })
  @Column({ type: 'text', nullable: true })
  parentEmail: string;

  @IsOptional({ groups: [UPDATE] })
  @Column({ type: 'text', nullable: true })
  thingsToLookOutFor: string;

  @Column({
    type: 'enum',
    enum: enums.ClientStatusEnum,
    default: enums.ClientStatusEnum.Current,
  })
  status!: enums.ClientStatusEnum;

  // Associations

  @ManyToMany(() => User, (user) => user.clients)
  @JoinTable()
  associatedStaffs: User[];
}
