/**
 * This file generated by Apso.
 */
import { Controller } from '@nestjs/common';
import {
  Crud,
  CrudController,
  Override,
  ParsedRequest,
  CrudRequest,
  ParsedBody,
  CreateManyDto,
} from '@nestjsx/crud';
import { ApiTags, ApiResponse, ApiOperation, ApiBody } from '@nestjs/swagger';
import {
  ClinicInformation,
  ClinicInformationCreate,
} from './dtos/ClinicInformation.dto';
import { ClinicInformationService } from './ClinicInformation.service';

@Crud({
  model: {
    type: ClinicInformation,
  },
  dto: {
    create: ClinicInformationCreate,
    update: ClinicInformation,
    replace: ClinicInformation,
  },
  query: {
    /**
     * commenting out limit and pagination because of an issue with Crud lib: https://github.com/nestjsx/crud/issues/777
     */
    // TODO: make limit env driven?
    limit: 5,
    alwaysPaginate: true,
  },
})
@Controller('ClinicInformations')
@ApiTags('ClinicInformations')
export class ClinicInformationController
  implements CrudController<ClinicInformation>
{
  constructor(public service: ClinicInformationService) {}

  get base(): CrudController<ClinicInformation> {
    return this;
  }

  @Override('getManyBase')
  @ApiOperation({ summary: 'Retrieve multiple ClinicInformations' })
  getMany(@ParsedRequest() req: CrudRequest) {
    return this.base.getManyBase(req);
  }

  @Override('getOneBase')
  @ApiOperation({ summary: 'Retrieve a single ClinicInformation' })
  get(@ParsedRequest() req: CrudRequest) {
    return this.base.getOneBase(req);
  }

  @Override('createOneBase')
  @ApiOperation({ summary: 'Create a single ClinicInformation' })
  @ApiBody({
    type: ClinicInformationCreate,
    description:
      'The Description for the Post Body. Please look into the DTO. You will see the @ApiOptionalProperty used to define the Schema.',
  })
  create(
    @ParsedRequest() req: CrudRequest,
    @ParsedBody() dto: ClinicInformation
  ) {
    return this.base.createOneBase(req, dto);
  }

  @Override('createManyBase')
  @ApiOperation({ summary: 'Create multipleClinicInformations' })
  createMany(
    @ParsedRequest() req: CrudRequest,
    @ParsedBody() dto: CreateManyDto<ClinicInformation>
  ) {
    return this.base.createManyBase(req, dto);
  }

  @Override('updateOneBase')
  @ApiOperation({ summary: 'Update a single ClinicInformation' })
  update(
    @ParsedRequest() req: CrudRequest,
    @ParsedBody() dto: ClinicInformation
  ) {
    return this.base.updateOneBase(req, dto);
  }

  @Override('replaceOneBase')
  @ApiOperation({ summary: 'Replace a single ClinicInformation' })
  replace(
    @ParsedRequest() req: CrudRequest,
    @ParsedBody() dto: ClinicInformation
  ) {
    return this.base.replaceOneBase(req, dto);
  }

  @Override('deleteOneBase')
  @ApiOperation({ summary: 'Delete a single ClinicInformation' })
  delete(@ParsedRequest() req: CrudRequest) {
    return this.base.deleteOneBase(req);
  }
}
