/**
 * This file generated by Apso.
 */
import { Test, TestingModule } from '@nestjs/testing';
import {
  ClinicInformation,
  ClinicInformationCreate,
} from './dtos/ClinicInformation.dto';
import { ClinicInformationController } from './ClinicInformation.controller';
import { ClinicInformationService } from './ClinicInformation.service';
import { CrudRequest } from '@nestjsx/crud';

const baseRequest: CrudRequest = {
  parsed: {
    fields: [],
    paramsFilter: [],
    search: {},
    filter: [],
    or: [],
    join: [],
    sort: [],
    authPersist: undefined,
    limit: 10,
    offset: 0,
    page: 1,
    cache: undefined,
  },
  options: {},
};

describe('ClinicInformationController', () => {
  let controller: ClinicInformationController;
  let spyService: ClinicInformationService;

  beforeEach(async () => {
    const ApiServiceProvider = {
      provide: ClinicInformationService,
      useFactory: () => ({
        createOne: jest.fn(() => []),
        getOne: jest.fn(() => {}),
      }),
    };
    const module: TestingModule = await Test.createTestingModule({
      controllers: [ClinicInformationController],
      providers: [ClinicInformationService, ApiServiceProvider],
    }).compile();

    controller = module.get<ClinicInformationController>(
      ClinicInformationController
    );
    spyService = module.get<ClinicInformationService>(ClinicInformationService);
  });

  it('should be defined', () => {
    expect(controller).toBeDefined();
  });

  it('should call ClinicInformationController get method', () => {
    const req: CrudRequest = { ...baseRequest };
    expect(controller.get(req)).not.toEqual(null);
    expect(spyService.getOne).toHaveBeenCalled();
  });

  it('should call ClinicInformationController create method', () => {
    const req: CrudRequest = { ...baseRequest };

    const dto = new ClinicInformation();
    controller.create(req, dto);
    expect(controller.create(req, dto)).not.toEqual(null);
    expect(spyService.createOne).toHaveBeenCalled();
  });

  // Add your tests here
});
