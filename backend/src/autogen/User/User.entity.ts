/**
 * This file generated by Apso.
 */ /* eslint @typescript-eslint/no-unused-vars: "off" */

import {
  Column,
  Entity,
  OneToMany,
  ManyToMany,
  OneToOne,
  CreateDateColumn,
  UpdateDateColumn,
  PrimaryGeneratedColumn,
  Generated,
  JoinColumn,
  JoinTable,
  Index,
  Unique,
  PrimaryColumn,
} from 'typeorm';
import {
  IsOptional,
  IsString,
  MaxLength,
  IsNotEmpty,
  IsEmail,
  IsBoolean,
  ValidateNested,
} from 'class-validator';
import { Type } from 'class-transformer';
import { CrudValidationGroups } from '@nestjsx/crud';
import * as enums from '../enums';
import { Note } from '../Note/Note.entity';
import { Client } from '../Client/Client.entity';
import { staffHour } from '../staffHour/staffHour.entity';
import { ClinicInformation } from '../ClinicInformation/ClinicInformation.entity';
import { EmergencyContact } from '../EmergencyContact/EmergencyContact.entity';
import { SpecialCondition } from '../SpecialCondition/SpecialCondition.entity';
import { Credential } from '../Credential/Credential.entity';

const { CREATE, UPDATE } = CrudValidationGroups;

@Entity('user')
export class User {
  // Fields
  @PrimaryGeneratedColumn()
  id!: number;

  @CreateDateColumn()
  created_at: Date;

  @UpdateDateColumn()
  updated_at: Date;

  @IsOptional({ groups: [UPDATE] })
  @IsNotEmpty({ groups: [CREATE] })
  @IsEmail({ require_tld: false }, { always: true })
  @Column({ type: 'text', nullable: false, unique: true })
  email: string;

  @IsOptional({ groups: [UPDATE] })
  @Column({ type: 'text', nullable: true })
  firstName: string;

  @IsOptional({ groups: [UPDATE] })
  @Column({ type: 'text', nullable: true })
  lastName: string;

  @IsOptional({ groups: [UPDATE] })
  @IsNotEmpty({ groups: [CREATE] })
  @Column({ type: 'text', nullable: false })
  clerkId: string;

  @Column({
    type: 'enum',
    enum: enums.UserStatusEnum,
    default: enums.UserStatusEnum.Active,
  })
  status!: enums.UserStatusEnum;

  @Column({
    type: 'enum',
    enum: enums.UserRoleEnum,
    default: enums.UserRoleEnum.staff,
  })
  role!: enums.UserRoleEnum;

  @IsOptional({ groups: [UPDATE] })
  @Column({ type: 'text', nullable: true })
  primary_phone: string;

  @IsOptional({ groups: [UPDATE] })
  @Column({ type: 'text', nullable: true })
  signature: string;

  @IsOptional({ groups: [UPDATE] })
  @Column({ type: 'text', nullable: true })
  title: string;

  @IsOptional({ groups: [UPDATE] })
  @Column({ type: 'text', nullable: true })
  bio: string;

  @IsOptional({ groups: [UPDATE] })
  @Column({ type: 'text', nullable: true })
  address1: string;

  @IsOptional({ groups: [UPDATE] })
  @Column({ type: 'text', nullable: true })
  address2: string;

  @IsOptional({ groups: [UPDATE] })
  @Column({ type: 'text', nullable: true })
  city: string;

  @IsOptional({ groups: [UPDATE] })
  @Column({ type: 'text', nullable: true })
  state: string;

  @Column({ type: 'int', default: 0 })
  zip_code: number;

  @IsOptional({ groups: [UPDATE] })
  @Column({ type: 'text', nullable: true })
  date_of_birth: string;

  @IsOptional({ groups: [UPDATE] })
  @Column({ type: 'text', nullable: true })
  gender: string;

  @IsOptional({ groups: [UPDATE] })
  @Column({ type: 'text', nullable: true })
  work_phone: string;

  @IsOptional({ groups: [UPDATE] })
  @Column({ type: 'text', nullable: true })
  home_phone: string;

  @IsOptional({ groups: [UPDATE] })
  @Column({ type: 'text', nullable: true })
  social_security_number: string;

  @IsOptional({ groups: [UPDATE] })
  @Column({ type: 'text', nullable: true })
  image_url: string;

  // Associations

  @OneToMany(() => Note, (note) => note.user)
  notes: Note[];

  @ManyToMany(() => Client, (client) => client.associatedStaffs)
  clients: Client[];

  @OneToOne((type: any) => staffHour, {
    onDelete: 'CASCADE',
    cascade: ['insert', 'update'],
  })
  @JoinColumn()
  staffHour: staffHour;

  @OneToOne((type: any) => ClinicInformation, {
    onDelete: 'CASCADE',
    cascade: ['insert', 'update'],
  })
  @JoinColumn()
  clinicInformation: ClinicInformation;

  @OneToMany(
    () => EmergencyContact,
    (emergencyContact) => emergencyContact.user
  )
  emergencyContacts: EmergencyContact[];

  @ManyToMany(() => SpecialCondition)
  @JoinTable()
  specialConditions: SpecialCondition[];

  @OneToMany(() => Credential, (credential) => credential.user)
  credentials: Credential[];
}
